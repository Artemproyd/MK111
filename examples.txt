// –ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

// 1. –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ
int 42 x = ;

// 2. –ê—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ  
int y = 10 + 5 * 2;

// 3. –£—Å–ª–æ–≤–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä
if (x > 5) {
    y = 10;
}

// 4. –£—Å–ª–æ–≤–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å else
if (a > b) {
    max = a;
} else {
    max = b;
}

// 5. –¶–∏–∫–ª while
while (x > 0) {
    x = x - 1;
}

// 6. –û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
int a;
int b = 5;
int arr[10];

// 7. –õ–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
if (x > 5 && y < 10) {
    result = 1;
}

// 8. –í–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
if (x > 0) {
    while (y > 0) {
        y = y - 1;
    }
} 

int arr[4];

arr[0] = 5;
arr[1] = 8;
arr[2] = 3;
arr[3] = 3;

for (int i = 0; i < 4; i = i + 1){
    write(arr[i]);
}
int i = 0;
int addd = 0;
for (i = 0; i < 4; i = i + 1){
    int curr = arr[i];
    
    int indx = i;
    int new = curr;
    
    for (addd = i + 1; addd < 4; addd = addd + 1){
        if (arr[addd] < new) {
            indx = addd;
            new = arr[addd];
        }
    }
    
    arr[indx] = curr;
    arr[i] = new;
}

for (int i = 0; i < 4; i = i + 1){
    write(arr[i]);
}

==========================================

üî® –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞...
-- Configuring done (0.3s)
-- Generating done (0.0s)
-- Build files have been written to: C:/Users/PC-ACER/Desktop/bin/build
[100%] Built target syntax_analyzer
‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!

üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞...

üöÄ –ö–û–ú–ü–ò–õ–Ø–¢–û–†: –õ–µ–∫—Å–∏—á–µ—Å–∫–∏–π + –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
–í–µ—Ä—Å–∏—è: 1.0
–°–æ–≥–ª–∞—Å–Ω–æ –ª–µ–∫—Ü–∏—è–º –ø–æ –º–µ—Ç–æ–¥–∞–º –∫–æ–º–ø–∏–ª—è—Ü–∏–∏

üìÅ –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –∏–∑ —Ñ–∞–π–ª–∞: input.txt

============================================================
–ê–ù–ê–õ–ò–ó: –ö–æ–¥ –∏–∑ —Ñ–∞–π–ª–∞ input.txt
------------------------------------------------------------
–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥:
int x = 32;

------------------------------
1) –õ–ï–ö–°–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó (–∫–æ–Ω–µ—á–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç):
–¢–æ–∫–µ–Ω—ã:
  KEYWORD: 'int'
  IDENTIFIER: 'x'
  OPERATOR: '='
  NUMBER: '32'
  SEMICOLON: ';'
------------------------------
2) –°–ò–ù–¢–ê–ö–°–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó (–º–∞–≥–∞–∑–∏–Ω–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç + –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –û–ü–°):
–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –û–ü–°:
  32 x :=

============================================================
‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!

–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...


–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥:
if (x > 5) {
    y = 10;
}

------------------------------
1) –õ–ï–ö–°–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó (–∫–æ–Ω–µ—á–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç):
–¢–æ–∫–µ–Ω—ã:
  KEYWORD: 'if'
  LEFT_PAREN: '('
  IDENTIFIER: 'x'
  OPERATOR: '>'
  NUMBER: '5'
  RIGHT_PAREN: ')'
  LEFT_BRACE: '{'
  IDENTIFIER: 'y'
  OPERATOR: '='
  NUMBER: '10'
  SEMICOLON: ';'
  RIGHT_BRACE: '}'
------------------------------
2) –°–ò–ù–¢–ê–ö–°–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó (–º–∞–≥–∞–∑–∏–Ω–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç + –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –û–ü–°):
–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –û–ü–°:
  x 5 > m0 jf y 10 := m0:

============================================================
‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!

–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...

// –ü—Ä–∏–º–µ—Ä 1: –ü—Ä–æ—Å—Ç–∞—è –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞
int a = 10;
int b = 5;
int result = a + b * 2;
write(result);

// –ü—Ä–∏–º–µ—Ä 2: –£—Å–ª–æ–≤–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä
int x = 7;
if (x > 5) {
    write(1);
} else {
    write(0);
}

// –ü—Ä–∏–º–µ—Ä 3: –¶–∏–∫–ª while
int counter = 3;
while (counter > 0) {
    write(counter);
    counter = counter - 1;
}

// –ü—Ä–∏–º–µ—Ä 4: –†–∞–±–æ—Ç–∞ —Å –º–∞—Å—Å–∏–≤–∞–º–∏
int numbers[3];
numbers[0] = 10;
numbers[1] = 20;
numbers[2] = 30;
write(numbers[1]);

// –ü—Ä–∏–º–µ—Ä 5: –ß—Ç–µ–Ω–∏–µ –∏ –≤—ã–≤–æ–¥
int value;
read(value);
write(value);