#include "ops_interpreter.h"
#include <iostream>
#include <sstream>
#include <stdexcept>
#include <cctype>

OPSInterpreter::OPSInterpreter() : programCounter(0), running(false) {}

void OPSInterpreter::execute(const std::vector<std::string>& opsCommands) {
    if (opsCommands.empty()) {
        std::cout << "‚ùå –ù–µ—Ç –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è!" << std::endl;
        return;
    }
    
    commands = opsCommands;
    programCounter = 0;
    running = true;
    
    // –°–Ω–∞—á–∞–ª–∞ –ø–∞—Ä—Å–∏–º –º–µ—Ç–∫–∏
    parseLabels();
    
    std::cout << "\nüîÑ –í–´–ü–û–õ–ù–ï–ù–ò–ï –û–ü–°:" << std::endl;
    std::cout << "–ö–æ–º–∞–Ω–¥—ã: ";
    for (size_t i = 0; i < commands.size(); ++i) {
        std::cout << commands[i];
        if (i < commands.size() - 1) std::cout << " ";
    }
    std::cout << "\n" << std::string(50, '-') << std::endl;
    
    // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    while (running && programCounter < commands.size()) {
        const std::string& command = commands[programCounter];
        
        std::cout << "PC=" << programCounter << ": " << command;
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–µ—Ç–∫–∏ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
        if (command.back() == ':') {
            std::cout << " (–º–µ—Ç–∫–∞)" << std::endl;
            programCounter++;
            continue;
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
        if (isNumber(command)) {
            // –¶–µ–ª–æ–µ —á–∏—Å–ª–æ - –ø–æ–º–µ—â–∞–µ–º –≤ —Å—Ç–µ–∫
            int value = std::stoi(command);
            pushStack(Value(value));
            std::cout << " ‚Üí —Å—Ç–µ–∫: " << value;
        }
        else if (isDoubleNumber(command)) {
            // –ß–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π - –ø–æ–º–µ—â–∞–µ–º –≤ —Å—Ç–µ–∫
            double value = std::stod(command);
            pushStack(Value(value));
            std::cout << " ‚Üí —Å—Ç–µ–∫: " << value;
        }
        else if (command == ":=") {
            // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ
            executeAssignment();
            std::cout << " ‚Üí –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ";
        }
        else if (command == "r") {
            // –û–ø–µ—Ä–∞—Ü–∏—è —á—Ç–µ–Ω–∏—è (read/input)
            executeRead();
            std::cout << " ‚Üí —á—Ç–µ–Ω–∏–µ";
        }
        else if (command == "w") {
            // –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–ø–∏—Å–∏ (write/output)
            executeWrite();
            std::cout << " ‚Üí –∑–∞–ø–∏—Å—å";
        }
        else if (command == "alloc_array") {
            // –í—ã–¥–µ–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –¥–ª—è –º–∞—Å—Å–∏–≤–∞
            executeArrayAlloc();
            std::cout << " ‚Üí –≤—ã–¥–µ–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –º–∞—Å—Å–∏–≤–∞";
        }
        else if (command == "array_get") {
            // –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞
            executeArrayGet();
            std::cout << " ‚Üí –ø–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞";
        }
        else if (command == "array_set") {
            // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞
            executeArraySet();
            std::cout << " ‚Üí —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞";
        }
        else if (command == "array_read") {
            // –ß—Ç–µ–Ω–∏–µ –≤ —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞
            executeArrayRead();
            std::cout << " ‚Üí —á—Ç–µ–Ω–∏–µ –≤ —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞";
        }
        else if (command == "array_read_2d") {
            // –ß—Ç–µ–Ω–∏–µ –≤ —ç–ª–µ–º–µ–Ω—Ç –¥–≤—É–º–µ—Ä–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
            executeArrayRead2D();
            std::cout << " ‚Üí —á—Ç–µ–Ω–∏–µ –≤ —ç–ª–µ–º–µ–Ω—Ç 2D –º–∞—Å—Å–∏–≤–∞";
        }
        else if (command == "alloc_array_2d") {
            // –í—ã–¥–µ–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –¥–ª—è –¥–≤—É–º–µ—Ä–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
            executeArrayAlloc2D();
            std::cout << " ‚Üí –≤—ã–¥–µ–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ 2D –º–∞—Å—Å–∏–≤–∞";
        }
        else if (command == "array_get_2d") {
            // –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–≤—É–º–µ—Ä–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
            executeArrayGet2D();
            std::cout << " ‚Üí –ø–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ 2D –º–∞—Å—Å–∏–≤–∞";
        }
        else if (command == "array_set_2d") {
            // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–≤—É–º–µ—Ä–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
            executeArraySet2D();
            std::cout << " ‚Üí —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ 2D –º–∞—Å—Å–∏–≤–∞";
        }
        else if (command == "declare") {
            // –û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
            executeDeclare();
            std::cout << " ‚Üí –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π";
        }
        else if (command == "declare_assign") {
            // –û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ–º
            executeDeclareAssign();
            std::cout << " ‚Üí –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ–º";
        }
        else if (command == "jf") {
            // –£—Å–ª–æ–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ - –º–µ—Ç–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–æ–º–∞–Ω–¥–æ–π
            if (programCounter > 0) {
                std::string label = commands[programCounter - 1];
                size_t oldPC = programCounter;
                executeConditionalJump(label);
                std::cout << " ‚Üí —É—Å–ª–æ–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ " << label;
                
                // –ï—Å–ª–∏ programCounter –∏–∑–º–µ–Ω–∏–ª—Å—è, –∑–Ω–∞—á–∏—Ç –ø—Ä–æ–∏–∑–æ—à–µ–ª –ø–µ—Ä–µ—Ö–æ–¥
                if (programCounter != oldPC) {
                    continue; // –ü–µ—Ä–µ—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º programCounter
                }
                // –ò–Ω–∞—á–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (programCounter –±—É–¥–µ—Ç —É–≤–µ–ª–∏—á–µ–Ω)
            } else {
                std::cout << " (–Ω–µ—Ç –º–µ—Ç–∫–∏)";
            }
        }
        else if (command == "j") {
            // –ë–µ–∑—É—Å–ª–æ–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ - –º–µ—Ç–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–æ–º–∞–Ω–¥–æ–π
            if (programCounter > 0) {
                std::string label = commands[programCounter - 1];
                executeJump(label);
                std::cout << " ‚Üí –±–µ–∑—É—Å–ª–æ–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ " << label;
                continue; // programCounter —É–∂–µ –∏–∑–º–µ–Ω–µ–Ω –≤ executeJump
            } else {
                std::cout << " (–Ω–µ—Ç –º–µ—Ç–∫–∏)";
            }
        }
        else if (isOperator(command)) {
            // –ê—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –∏–ª–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
            if (command == "+" || command == "-" || command == "*" || command == "/") {
                executeArithmetic(command);
            }
            else if (command == ">" || command == "<" || command == "==") {
                executeComparison(command);
            }
            std::cout << " ‚Üí —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å—Ç–µ–∫–µ";
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ—Ö–æ–¥–∞
        else if (programCounter + 1 < commands.size() && 
                 (commands[programCounter + 1] == "jf" || commands[programCounter + 1] == "j")) {
            // –≠—Ç–æ –∞—Ä–≥—É–º–µ–Ω—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ—Ö–æ–¥–∞, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            std::cout << " (–∞—Ä–≥—É–º–µ–Ω—Ç –¥–ª—è " << commands[programCounter + 1] << ")";
        }
        else if (isVariable(command)) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–ª–µ–¥—É–µ—Ç –ª–∏ –∑–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è –∏–ª–∏ –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞
            bool isAssignmentTarget = false;
            bool isTypeKeyword = false;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º —Ç–∏–ø–∞
            if (command == "int" || command == "double" || command == "float" || command == "char") {
                isTypeKeyword = true;
            }
            
            if (programCounter + 1 < commands.size() && 
                (commands[programCounter + 1] == ":=" || 
                 commands[programCounter + 1] == "r" ||
                 commands[programCounter + 1] == "declare_assign")) {
                isAssignmentTarget = true;
            }
            
            if (isTypeKeyword) {
                // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Ç–∏–ø–æ–≤ - –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤ —Å—Ç–µ–∫
                std::cout << " ‚Üí —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö: " << command;
            } else if (isAssignmentTarget) {
                // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–¥ := –∏–ª–∏ r –∏–ª–∏ declare_assign - —ç—Ç–æ —Ü–µ–ª—å, –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤ —Å—Ç–µ–∫
                std::cout << " ‚Üí —Ü–µ–ª—å –¥–ª—è " << commands[programCounter + 1] << ": " << command;
            } else {
                // –û–±—ã—á–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–¥ w - –ø–æ–º–µ—â–∞–µ–º –µ—ë –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å—Ç–µ–∫
                Value value = getVariable(command);
                pushStack(value);
                std::cout << " ‚Üí —Å—Ç–µ–∫: " << command << "=" << value;
            }
        }
        else {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –º–µ—Ç–∫–æ–π –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ—Ö–æ–¥–∞
            if (programCounter > 0 && 
                (commands[programCounter - 1] == "jf" || commands[programCounter - 1] == "j")) {
                // –≠—Ç–æ –º–µ—Ç–∫–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ—Ö–æ–¥–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—ë
                std::cout << " (–∞—Ä–≥—É–º–µ–Ω—Ç –¥–ª—è " << commands[programCounter - 1] << ")";
            }
            else if (command.back() == ':') {
                // –ú–µ—Ç–∫–∞ –≤ –∫–æ–¥–µ
                std::cout << " (–º–µ—Ç–∫–∞)";
            }
            else {
                // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
                std::cout << " (–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: " << command << ")";
            }
        }
        
        std::cout << std::endl;
        programCounter++;
    }
    
    std::cout << std::string(50, '-') << std::endl;
    std::cout << "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!" << std::endl;
    printState();
}

void OPSInterpreter::parseLabels() {
    labels.clear();
    for (size_t i = 0; i < commands.size(); ++i) {
        const std::string& command = commands[i];
        if (command.back() == ':') {
            // –≠—Ç–æ –º–µ—Ç–∫–∞
            std::string labelName = command.substr(0, command.length() - 1);
            labels[labelName] = i;
        }
    }
}

bool OPSInterpreter::isNumber(const std::string& str) const {
    if (str.empty()) return false;
    
    size_t start = 0;
    if (str[0] == '-' || str[0] == '+') {
        start = 1;
        if (str.length() == 1) return false;
    }
    
    for (size_t i = start; i < str.length(); ++i) {
        if (!std::isdigit(str[i])) {
            return false;
        }
    }
    return true;
}

bool OPSInterpreter::isDoubleNumber(const std::string& str) const {
    if (str.empty()) return false;
    
    size_t start = 0;
    if (str[0] == '-' || str[0] == '+') {
        start = 1;
        if (str.length() == 1) return false;
    }
    
    bool hasDot = false;
    for (size_t i = start; i < str.length(); ++i) {
        if (str[i] == '.') {
            if (hasDot) return false; // –í—Ç–æ—Ä–∞—è —Ç–æ—á–∫–∞
            hasDot = true;
        } else if (!std::isdigit(str[i])) {
            return false;
        }
    }
    return hasDot; // –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–æ—á–∫–∞ –¥–ª—è double
}

bool OPSInterpreter::isVariable(const std::string& str) const {
    if (str.empty()) return false;
    if (!std::isalpha(str[0]) && str[0] != '_') return false;
    
    for (size_t i = 1; i < str.length(); ++i) {
        if (!std::isalnum(str[i]) && str[i] != '_') {
            return false;
        }
    }
    return true;
}

bool OPSInterpreter::isOperator(const std::string& str) const {
    return str == "+" || str == "-" || str == "*" || str == "/" ||
           str == ">" || str == "<" || str == "==";
}

bool OPSInterpreter::isCommand(const std::string& str) const {
    return str == ":=" || str == "jf" || str == "j" || str == "r" || str == "w" ||
           str == "alloc_array" || str == "array_get" || str == "array_set" || str == "array_read" ||
           str == "alloc_array_2d" || str == "array_get_2d" || str == "array_set_2d" || str == "array_read_2d" || 
           str == "declare" || str == "declare_assign";
}

void OPSInterpreter::executeArithmetic(const std::string& op) {
    if (operandStack.size() < 2) {
        error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø–µ—Ä–∞–Ω–¥–æ–≤ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ " + op);
    }
    
    Value b = popStack(); // –í—Ç–æ—Ä–æ–π –æ–ø–µ—Ä–∞–Ω–¥
    Value a = popStack(); // –ü–µ—Ä–≤—ã–π –æ–ø–µ—Ä–∞–Ω–¥
    Value result;
    
    if (op == "+") {
        result = a + b;
    } else if (op == "-") {
        result = a - b;
    } else if (op == "*") {
        result = a * b;
    } else if (op == "/") {
        if ((b.isInt() && b.asInt() == 0) || (b.isDouble() && b.asDouble() == 0.0)) {
            error("–î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å");
        }
        result = a / b;
    }
    
    pushStack(result);
}

void OPSInterpreter::executeComparison(const std::string& op) {
    if (operandStack.size() < 2) {
        error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø–µ—Ä–∞–Ω–¥–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è " + op);
    }
    
    Value b = popStack(); // –í—Ç–æ—Ä–æ–π –æ–ø–µ—Ä–∞–Ω–¥
    Value a = popStack(); // –ü–µ—Ä–≤—ã–π –æ–ø–µ—Ä–∞–Ω–¥
    Value result;
    
    if (op == ">") {
        if (a.isDouble() || b.isDouble()) {
            result = Value(a.asDouble() > b.asDouble() ? 1 : 0);
        } else {
            result = Value(a.asInt() > b.asInt() ? 1 : 0);
        }
    } else if (op == "<") {
        if (a.isDouble() || b.isDouble()) {
            result = Value(a.asDouble() < b.asDouble() ? 1 : 0);
        } else {
            result = Value(a.asInt() < b.asInt() ? 1 : 0);
        }
    } else if (op == "==") {
        if (a.isDouble() || b.isDouble()) {
            result = Value(a.asDouble() == b.asDouble() ? 1 : 0);
        } else {
            result = Value(a.asInt() == b.asInt() ? 1 : 0);
        }
    }
    
    pushStack(result);
}

void OPSInterpreter::executeAssignment() {
    if (operandStack.size() < 1) {
        error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø–µ—Ä–∞–Ω–¥–æ–≤ –¥–ª—è –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è");
    }
    
    Value value = popStack(); // –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è
    
    // –ò–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä—è–º–æ –ø–µ—Ä–µ–¥ –∫–æ–º–∞–Ω–¥–æ–π ":="
    if (programCounter == 0) {
        error("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è");
    }
    
    std::string varName = commands[programCounter - 1];
    
    if (!isVariable(varName)) {
        error("–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è: " + varName);
    }
    
    variables[varName] = value;
    std::cout << " (" << varName << " = " << value << ")";
}

void OPSInterpreter::executeJump(const std::string& label) {
    auto it = labels.find(label);
    if (it != labels.end()) {
        programCounter = it->second;
    } else {
        error("–ú–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: " + label);
    }
}

void OPSInterpreter::executeConditionalJump(const std::string& label) {
    if (operandStack.empty()) {
        error("–ù–µ—Ç —É—Å–ª–æ–≤–∏—è –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞");
    }
    
    Value condition = popStack();
    
    // jf - jump if false (–ø–µ—Ä–µ—Ö–æ–¥ –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –ª–æ–∂–Ω–æ)
    if ((condition.isInt() && condition.asInt() == 0) || (condition.isDouble() && condition.asDouble() == 0.0)) {
        // –£—Å–ª–æ–≤–∏–µ –ª–æ–∂–Ω–æ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –º–µ—Ç–∫–µ
        auto it = labels.find(label);
        if (it != labels.end()) {
            programCounter = it->second;
            std::cout << " (–ø–µ—Ä–µ—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω: —É—Å–ª–æ–≤–∏–µ = " << condition << ")";
        } else {
            error("–ú–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: " + label);
        }
    } else {
        // –£—Å–ª–æ–≤–∏–µ –∏—Å—Ç–∏–Ω–Ω–æ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (programCounter –±—É–¥–µ—Ç —É–≤–µ–ª–∏—á–µ–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ)
        std::cout << " (–ø–µ—Ä–µ—Ö–æ–¥ –ù–ï –≤—ã–ø–æ–ª–Ω–µ–Ω: —É—Å–ª–æ–≤–∏–µ = " << condition << ")";
    }
}

Value OPSInterpreter::popStack() {
    if (operandStack.empty()) {
        error("–ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑ –ø—É—Å—Ç–æ–≥–æ —Å—Ç–µ–∫–∞");
    }
    
    Value value = operandStack.top();
    operandStack.pop();
    return value;
}

void OPSInterpreter::pushStack(const Value& value) {
    operandStack.push(value);
}

void OPSInterpreter::setVariable(const std::string& name, const Value& value) {
    variables[name] = value;
}

void OPSInterpreter::setVariable(const std::string& name, int value) {
    variables[name] = Value(value);
}

void OPSInterpreter::setVariable(const std::string& name, double value) {
    variables[name] = Value(value);
}

Value OPSInterpreter::getVariable(const std::string& name) const {
    auto it = variables.find(name);
    if (it != variables.end()) {
        return it->second;
    }
    return Value(); // –ù–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–º–µ—é—Ç –∑–Ω–∞—á–µ–Ω–∏–µ 0
}

void OPSInterpreter::printState() const {
    std::cout << "\n –°–û–°–¢–û–Ø–ù–ò–ï –ò–ù–¢–ï–†–ü–†–ï–¢–ê–¢–û–†–ê:" << std::endl;
    
    std::cout << "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:" << std::endl;
    if (variables.empty()) {
        std::cout << "  (–Ω–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö)" << std::endl;
    } else {
        for (const auto& var : variables) {
            std::cout << "  " << var.first << " = " << var.second << std::endl;
        }
    }
    
    std::cout << "–ú–∞—Å—Å–∏–≤—ã:" << std::endl;
    if (arrays.empty()) {
        std::cout << "  (–Ω–µ—Ç –æ–¥–Ω–æ–º–µ—Ä–Ω—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤)" << std::endl;
    } else {
        for (const auto& array : arrays) {
            std::cout << "  " << array.first << "[" << array.second.size() << "] = {";
            for (size_t i = 0; i < array.second.size(); ++i) {
                std::cout << array.second[i];
                if (i < array.second.size() - 1) std::cout << ", ";
            }
            std::cout << "}" << std::endl;
        }
    }
    
    std::cout << "–î–≤—É–º–µ—Ä–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã:" << std::endl;
    if (arrays2D.empty()) {
        std::cout << "  (–Ω–µ—Ç –¥–≤—É–º–µ—Ä–Ω—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤)" << std::endl;
    } else {
        for (const auto& array : arrays2D) {
            std::cout << "  " << array.first << "[" << array.second.size() << "][" 
                      << (array.second.empty() ? 0 : array.second[0].size()) << "] = {" << std::endl;
            for (size_t i = 0; i < array.second.size(); ++i) {
                std::cout << "    {";
                for (size_t j = 0; j < array.second[i].size(); ++j) {
                    std::cout << array.second[i][j];
                    if (j < array.second[i].size() - 1) std::cout << ", ";
                }
                std::cout << "}";
                if (i < array.second.size() - 1) std::cout << ",";
                std::cout << std::endl;
            }
            std::cout << "  }" << std::endl;
        }
    }
    
    std::cout << "–°—Ç–µ–∫ –æ–ø–µ—Ä–∞–Ω–¥–æ–≤:" << std::endl;
    if (operandStack.empty()) {
        std::cout << "  (–ø—É—Å—Ç–æ–π)" << std::endl;
    } else {
        std::stack<Value> tempStack = operandStack;
        std::vector<Value> stackContents;
        while (!tempStack.empty()) {
            stackContents.push_back(tempStack.top());
            tempStack.pop();
        }
        std::cout << "  ";
        for (int i = static_cast<int>(stackContents.size()) - 1; i >= 0; --i) {
            std::cout << stackContents[i];
        }
        std::cout << "(–≤–µ—Ä—à–∏–Ω–∞ —Å–ø—Ä–∞–≤–∞)" << std::endl;
    }
    
    if (!labels.empty()) {
        std::cout << "–ú–µ—Ç–∫–∏:" << std::endl;
        for (const auto& label : labels) {
            std::cout << "  " << label.first << " -> –ø–æ–∑–∏—Ü–∏—è " << label.second << std::endl;
        }
    }
}

void OPSInterpreter::reset() {
    while (!operandStack.empty()) {
        operandStack.pop();
    }
    variables.clear();
    arrays.clear();
    arrays2D.clear();
    labels.clear();
    commands.clear();
    programCounter = 0;
    running = false;
}

void OPSInterpreter::error(const std::string& message) const {
    throw std::runtime_error("–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∞: " + message + 
                              " (–ø–æ–∑–∏—Ü–∏—è " + std::to_string(programCounter) + ")");
}

void OPSInterpreter::executeRead() {
    // –û–ø–µ—Ä–∞—Ü–∏—è —á—Ç–µ–Ω–∏—è - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    std::cout << "\n  –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ";
    double value;
    std::cin >> value;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –ø–µ—Ä–µ–¥ –∫–æ–º–∞–Ω–¥–æ–π r –æ–ø–µ—Ä–∞—Ü–∏—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ i
    if (programCounter >= 1 && commands[programCounter - 1] == "i") {
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –º–∞—Å—Å–∏–≤ M[index]
        // –ù—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –∏–º—è –º–∞—Å—Å–∏–≤–∞ –∏ –∏–Ω–¥–µ–∫—Å –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∫–æ–º–∞–Ω–¥–∞—Ö
        if (programCounter >= 3) {
            std::string arrayName = commands[programCounter - 3]; // M
            std::string indexVar = commands[programCounter - 2];   // a
            
            int index = getVariable(indexVar).asInt();
            
            if (arrays.find(arrayName) == arrays.end()) {
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                arrays[arrayName] = std::vector<Value>(10, Value(0)); // —Ä–∞–∑–º–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            }
            
            if (index >= 0 && index < static_cast<int>(arrays[arrayName].size())) {
                arrays[arrayName][index] = Value(value);
                std::cout << "  –ü—Ä–æ—á–∏—Ç–∞–Ω–æ –≤ " << arrayName << "[" << index << "] = " << value;
            } else {
                error("–ò–Ω–¥–µ–∫—Å –º–∞—Å—Å–∏–≤–∞ –≤–Ω–µ –≥—Ä–∞–Ω–∏—Ü –ø—Ä–∏ –∑–∞–ø–∏—Å–∏: " + std::to_string(index));
            }
        } else {
            error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –º–∞—Å—Å–∏–≤");
        }
    } else {
        // –û–±—ã—á–Ω–∞—è –∑–∞–ø–∏—Å—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        if (programCounter == 0) {
            error("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —á—Ç–µ–Ω–∏—è");
        }
        
        std::string varName = commands[programCounter - 1];
        
        if (!isVariable(varName)) {
            error("–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è —á—Ç–µ–Ω–∏—è: " + varName);
        }
        
        variables[varName] = Value(value);
        std::cout << "  –ü—Ä–æ—á–∏—Ç–∞–Ω–æ: " << varName << " = " << value;
    }
}

void OPSInterpreter::executeWrite() {
    // –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–ø–∏—Å–∏ - –≤—ã–≤–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å—Ç–µ–∫–∞
    if (operandStack.empty()) {
        error("–ù–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞");
    }
    
    Value value = popStack();
    std::cout << "\n  –í–´–í–û–î: " << value;
}

void OPSInterpreter::executeArrayAlloc() {
    // –§–æ—Ä–º–∞—Ç: type arrayName size alloc_array ‚Üí –≤—ã–¥–µ–ª—è–µ—Ç –ø–∞–º—è—Ç—å –¥–ª—è –º–∞—Å—Å–∏–≤–∞ arrayName —Ä–∞–∑–º–µ—Ä–æ–º size
    
    // –†–∞–∑–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Å—Ç–µ–∫–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –ø–µ—Ä–µ–¥ –∫–æ–º–∞–Ω–¥–æ–π)
    // –ò–º—è –º–∞—Å—Å–∏–≤–∞ –∏ —Ç–∏–ø - –≤ –∫–æ–º–∞–Ω–¥–∞—Ö –ø–µ—Ä–µ–¥ alloc_array
    if (programCounter < 3) {
        error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏ –º–∞—Å—Å–∏–≤–∞");
    }
    
    std::string arraySize = commands[programCounter - 1]; // —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞
    std::string arrayName = commands[programCounter - 2]; // –∏–º—è –º–∞—Å—Å–∏–≤–∞
    std::string arrayType = commands[programCounter - 3]; // —Ç–∏–ø –º–∞—Å—Å–∏–≤–∞
    
    if (!isNumber(arraySize)) {
        error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞: " + arraySize);
    }
    
    int size = std::stoi(arraySize);
    
    if (!isVariable(arrayName)) {
        error("–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –º–∞—Å—Å–∏–≤–∞ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏: " + arrayName);
    }
    
    if (size < 0) {
        error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞: " + std::to_string(size));
    }
    
    // –í—ã–¥–µ–ª—è–µ–º –ø–∞–º—è—Ç—å –¥–ª—è –º–∞—Å—Å–∏–≤–∞ —Ä–∞–∑–º–µ—Ä–æ–º size (–±–µ–∑ +1)
    arrays[arrayName] = std::vector<Value>(size, Value(0));
    
    std::cout << " (–≤—ã–¥–µ–ª–µ–Ω –º–∞—Å—Å–∏–≤ " << arrayType << " " << arrayName << "[" << size << "], –∏–Ω–¥–µ–∫—Å—ã 0-" << (size - 1) << ")";
}

void OPSInterpreter::executeArrayGet() {
    // –§–æ—Ä–º–∞—Ç: arrayName index array_get ‚Üí –∑–Ω–∞—á–µ–Ω–∏–µ arrayName[index]
    if (operandStack.size() < 1) {
        error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø–µ—Ä–∞–Ω–¥–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞");
    }
    
    int index = popStack().asInt();  // –ò–Ω–¥–µ–∫—Å –º–∞—Å—Å–∏–≤–∞
    
    // –ò–º—è –º–∞—Å—Å–∏–≤–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–µ—Ä–µ–¥ –∏–Ω–¥–µ–∫—Å–æ–º (–∑–∞ 2 –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞–∑–∞–¥)
    if (programCounter < 2) {
        error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–º—è –º–∞—Å—Å–∏–≤–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞");
    }
    
    std::string arrayName = commands[programCounter - 2]; // –∏–º—è –º–∞—Å—Å–∏–≤–∞ –ø–µ—Ä–µ–¥ –∏–Ω–¥–µ–∫—Å–æ–º
    
    if (!isVariable(arrayName)) {
        error("–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –º–∞—Å—Å–∏–≤–∞: " + arrayName);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –º–∞—Å—Å–∏–≤–∞
    if (arrays.find(arrayName) == arrays.end()) {
        error("–ú–∞—Å—Å–∏–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: " + arrayName);
    }
    
    if (index < 0 || index >= static_cast<int>(arrays[arrayName].size())) {
        error("–ò–Ω–¥–µ–∫—Å –º–∞—Å—Å–∏–≤–∞ –≤–Ω–µ –≥—Ä–∞–Ω–∏—Ü: " + std::to_string(index));
    }
    
    // –ü–æ–º–µ—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –≤ —Å—Ç–µ–∫ (–¥–ª—è —á—Ç–µ–Ω–∏—è)
    pushStack(arrays[arrayName][index]);
    std::cout << " (" << arrayName << "[" << index << "] = " << arrays[arrayName][index] << ")";
}

void OPSInterpreter::executeArraySet() {
    // –§–æ—Ä–º–∞—Ç: arrayName index value array_set ‚Üí —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç arrayName[index] = value
    if (operandStack.size() < 2) {
        error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø–µ—Ä–∞–Ω–¥–æ–≤ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞");
    }
    
    Value value = popStack();  // –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (–ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤ —Å—Ç–µ–∫–µ)
    int index = popStack().asInt();   // –ò–Ω–¥–µ–∫—Å –º–∞—Å—Å–∏–≤–∞ (–ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤ —Å—Ç–µ–∫–µ)
    
    // –ò–º—è –º–∞—Å—Å–∏–≤–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞ 3 –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞–∑–∞–¥ (arrayName index value array_set)
    if (programCounter < 3) {
        error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–º—è –º–∞—Å—Å–∏–≤–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–∞");
    }
    
    std::string arrayName = commands[programCounter - 3]; // –∏–º—è –º–∞—Å—Å–∏–≤–∞ –ø–µ—Ä–µ–¥ –∏–Ω–¥–µ–∫—Å–æ–º –∏ –∑–Ω–∞—á–µ–Ω–∏–µ–º
    
    if (!isVariable(arrayName)) {
        error("–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –º–∞—Å—Å–∏–≤–∞: " + arrayName);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –º–∞—Å—Å–∏–≤–∞
    if (arrays.find(arrayName) == arrays.end()) {
        error("–ú–∞—Å—Å–∏–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: " + arrayName);
    }
    
    if (index < 0 || index >= static_cast<int>(arrays[arrayName].size())) {
        error("–ò–Ω–¥–µ–∫—Å –º–∞—Å—Å–∏–≤–∞ –≤–Ω–µ –≥—Ä–∞–Ω–∏—Ü: " + std::to_string(index));
    }
    
    arrays[arrayName][index] = value;
    std::cout << " (" << arrayName << "[" << index << "] = " << value << ")";
}

void OPSInterpreter::executeArrayRead() {
    // –§–æ—Ä–º–∞—Ç: arrayName index array_read ‚Üí —Å—á–∏—Ç—ã–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ arrayName[index]
    if (operandStack.size() < 1) {
        error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø–µ—Ä–∞–Ω–¥–æ–≤ –¥–ª—è —á—Ç–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞");
    }
    
    int index = popStack().asInt();  // –ò–Ω–¥–µ–∫—Å –º–∞—Å—Å–∏–≤–∞
    
    // –ò–º—è –º–∞—Å—Å–∏–≤–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–µ—Ä–µ–¥ –∏–Ω–¥–µ–∫—Å–æ–º (–∑–∞ 2 –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞–∑–∞–¥)
    if (programCounter < 2) {
        error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–º—è –º–∞—Å—Å–∏–≤–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞");
    }
    
    std::string arrayName = commands[programCounter - 2]; // –∏–º—è –º–∞—Å—Å–∏–≤–∞ –ø–µ—Ä–µ–¥ –∏–Ω–¥–µ–∫—Å–æ–º
    
    if (!isVariable(arrayName)) {
        error("–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –º–∞—Å—Å–∏–≤–∞: " + arrayName);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –º–∞—Å—Å–∏–≤–∞
    if (arrays.find(arrayName) == arrays.end()) {
        error("–ú–∞—Å—Å–∏–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: " + arrayName);
    }
    
    if (index < 0 || index >= static_cast<int>(arrays[arrayName].size())) {
        error("–ò–Ω–¥–µ–∫—Å –º–∞—Å—Å–∏–≤–∞ –≤–Ω–µ –≥—Ä–∞–Ω–∏—Ü: " + std::to_string(index));
    }
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    std::cout << "\n  –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è " << arrayName << "[" << index << "]: ";
    double value;
    std::cin >> value;
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –º–∞—Å—Å–∏–≤
    arrays[arrayName][index] = Value(value);
    std::cout << "  –ü—Ä–æ—á–∏—Ç–∞–Ω–æ –≤ " << arrayName << "[" << index << "] = " << value;
}

void OPSInterpreter::executeDeclare() {
    // –§–æ—Ä–º–∞—Ç: M a declare ‚Üí –æ–±—ä—è–≤–ª—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é M —Å –Ω–∞—á–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º a
    if (operandStack.size() < 1) {
        error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø–µ—Ä–∞–Ω–¥–æ–≤ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π");
    }
    
    int value = popStack().asInt();  // –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    
    if (programCounter < 2) {
        error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è");
    }
    
    std::string varName = commands[programCounter - 2];
    
    if (!isVariable(varName)) {
        error("–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è: " + varName);
    }
    
    variables[varName] = Value(value);
    std::cout << " (" << varName << " = " << value << ")";
}

void OPSInterpreter::executeDeclareAssign() {
    // –§–æ—Ä–º–∞—Ç: value type varName declare_assign ‚Üí –æ–±—ä—è–≤–ª—è–µ—Ç —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    if (operandStack.size() < 1) {
        error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø–µ—Ä–∞–Ω–¥–æ–≤ –¥–ª—è —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è");
    }
    
    Value value = popStack();  // –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è
    
    if (programCounter < 2) {
        error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è");
    }
    
    std::string varName = commands[programCounter - 1]; // –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    std::string varType = commands[programCounter - 2]; // —Ç–∏–ø –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    
    if (!isVariable(varName)) {
        error("–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è: " + varName);
    }
    
    // –ü—Ä–∏–≤–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ –∫ –Ω—É–∂–Ω–æ–º—É —Ç–∏–ø—É
    Value typedValue;
    if (varType == "int") {
        typedValue = Value(value.asInt()); // –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ int
    } else if (varType == "double" || varType == "float") {
        typedValue = Value(value.asDouble()); // –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ double
    } else {
        typedValue = value; // –¥–ª—è char –∏ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
    }
    
    variables[varName] = typedValue;
    std::cout << " (" << varType << " " << varName << " = " << typedValue << ")";
}

bool OPSInterpreter::isArrayName(const std::string& name) const {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–º—è –∏–º–µ–Ω–µ–º –º–∞—Å—Å–∏–≤–∞
    return arrays.find(name) != arrays.end() || 
           (isVariable(name) && name.length() == 1 && std::isupper(name[0]));
}

void OPSInterpreter::executeArrayAlloc2D() {
    // –§–æ—Ä–º–∞—Ç: type arrayName rows cols alloc_array_2d ‚Üí –≤—ã–¥–µ–ª—è–µ—Ç –ø–∞–º—è—Ç—å –¥–ª—è –¥–≤—É–º–µ—Ä–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ arrayName —Ä–∞–∑–º–µ—Ä–æ–º rows x cols
    
    // –†–∞–∑–º–µ—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –∫–æ–º–∞–Ω–¥–∞—Ö –ø–µ—Ä–µ–¥ alloc_array_2d
    if (programCounter < 4) {
        error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏ –¥–≤—É–º–µ—Ä–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞");
    }
    
    std::string colsStr = commands[programCounter - 1]; // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤
    std::string rowsStr = commands[programCounter - 2]; // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
    std::string arrayName = commands[programCounter - 3]; // –∏–º—è –º–∞—Å—Å–∏–≤–∞
    std::string arrayType = commands[programCounter - 4]; // —Ç–∏–ø –º–∞—Å—Å–∏–≤–∞
    
    if (!isNumber(rowsStr) || !isNumber(colsStr)) {
        error("–ù–µ–≤–µ—Ä–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –º–∞—Å—Å–∏–≤–∞: " + rowsStr + " x " + colsStr);
    }
    
    int rows = std::stoi(rowsStr);
    int cols = std::stoi(colsStr);
    
    if (!isVariable(arrayName)) {
        error("–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –º–∞—Å—Å–∏–≤–∞ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏: " + arrayName);
    }
    
    if (rows < 0 || cols < 0) {
        error("–ù–µ–≤–µ—Ä–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –º–∞—Å—Å–∏–≤–∞: " + std::to_string(rows) + " x " + std::to_string(cols));
    }
    
    // –í—ã–¥–µ–ª—è–µ–º –ø–∞–º—è—Ç—å –¥–ª—è –¥–≤—É–º–µ—Ä–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
    arrays2D[arrayName] = std::vector<std::vector<Value>>(rows, std::vector<Value>(cols, Value(0)));
    
    std::cout << " (–≤—ã–¥–µ–ª–µ–Ω –¥–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ " << arrayType << " " << arrayName << "[" << rows << "][" << cols << "])";
}

void OPSInterpreter::executeArrayGet2D() {
    // –§–æ—Ä–º–∞—Ç: arrayName row col array_get_2d ‚Üí –∑–Ω–∞—á–µ–Ω–∏–µ arrayName[row][col]
    if (operandStack.size() < 2) {
        error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø–µ—Ä–∞–Ω–¥–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–≤—É–º–µ—Ä–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞");
    }
    
    int col = popStack().asInt();  // –ò–Ω–¥–µ–∫—Å —Å—Ç–æ–ª–±—Ü–∞
    int row = popStack().asInt();  // –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏
    
    // –ò–º—è –º–∞—Å—Å–∏–≤–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞ 3 –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞–∑–∞–¥ (arrayName row col array_get_2d)
    if (programCounter < 3) {
        error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–º—è –º–∞—Å—Å–∏–≤–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞");
    }
    
    std::string arrayName = commands[programCounter - 3]; // –∏–º—è –º–∞—Å—Å–∏–≤–∞ –ø–µ—Ä–µ–¥ –∏–Ω–¥–µ–∫—Å–∞–º–∏
    
    if (!isVariable(arrayName)) {
        error("–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –º–∞—Å—Å–∏–≤–∞: " + arrayName);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –º–∞—Å—Å–∏–≤–∞
    if (arrays2D.find(arrayName) == arrays2D.end()) {
        error("–î–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: " + arrayName);
    }
    
    if (row < 0 || row >= static_cast<int>(arrays2D[arrayName].size()) ||
        col < 0 || col >= static_cast<int>(arrays2D[arrayName][row].size())) {
        error("–ò–Ω–¥–µ–∫—Å—ã –º–∞—Å—Å–∏–≤–∞ –≤–Ω–µ –≥—Ä–∞–Ω–∏—Ü: " + std::to_string(row) + ", " + std::to_string(col));
    }
    
    // –ü–æ–º–µ—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –≤ —Å—Ç–µ–∫ (–¥–ª—è —á—Ç–µ–Ω–∏—è)
    pushStack(arrays2D[arrayName][row][col]);
    std::cout << " (" << arrayName << "[" << row << "][" << col << "] = " << arrays2D[arrayName][row][col] << ")";
}

void OPSInterpreter::executeArraySet2D() {
    // –§–æ—Ä–º–∞—Ç: arrayName row col value array_set_2d ‚Üí —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç arrayName[row][col] = value
    if (operandStack.size() < 3) {
        error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø–µ—Ä–∞–Ω–¥–æ–≤ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–≤—É–º–µ—Ä–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞");
    }
    
    Value value = popStack();  // –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (–ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤ —Å—Ç–µ–∫–µ)
    int col = popStack().asInt();    // –ò–Ω–¥–µ–∫—Å —Å—Ç–æ–ª–±—Ü–∞ (–ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤ —Å—Ç–µ–∫–µ)
    int row = popStack().asInt();    // –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ (–ø–µ—Ä–≤–æ–µ –≤ —Å—Ç–µ–∫–µ)
    
    // –ò–º—è –º–∞—Å—Å–∏–≤–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞ 4 –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞–∑–∞–¥ (arrayName row col value array_set_2d)
    if (programCounter < 4) {
        error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–º—è –º–∞—Å—Å–∏–≤–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–∞");
    }
    
    std::string arrayName = commands[programCounter - 4]; // –∏–º—è –º–∞—Å—Å–∏–≤–∞ –ø–µ—Ä–µ–¥ –≤—Å–µ–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
    
    if (!isVariable(arrayName)) {
        error("–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –º–∞—Å—Å–∏–≤–∞: " + arrayName);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –º–∞—Å—Å–∏–≤–∞
    if (arrays2D.find(arrayName) == arrays2D.end()) {
        error("–î–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: " + arrayName);
    }
    
    if (row < 0 || row >= static_cast<int>(arrays2D[arrayName].size()) ||
        col < 0 || col >= static_cast<int>(arrays2D[arrayName][row].size())) {
        error("–ò–Ω–¥–µ–∫—Å—ã –º–∞—Å—Å–∏–≤–∞ –≤–Ω–µ –≥—Ä–∞–Ω–∏—Ü: " + std::to_string(row) + ", " + std::to_string(col));
    }
    
    arrays2D[arrayName][row][col] = value;
    std::cout << " (" << arrayName << "[" << row << "][" << col << "] = " << value << ")";
}

void OPSInterpreter::executeArrayRead2D() {
    // –§–æ—Ä–º–∞—Ç: arrayName row col array_read_2d ‚Üí —Å—á–∏—Ç—ã–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ arrayName[row][col]
    if (operandStack.size() < 2) {
        error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø–µ—Ä–∞–Ω–¥–æ–≤ –¥–ª—è —á—Ç–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–≤—É–º–µ—Ä–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞");
    }
    
    int col = popStack().asInt();  // –ò–Ω–¥–µ–∫—Å —Å—Ç–æ–ª–±—Ü–∞
    int row = popStack().asInt();  // –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏
    
    // –ò–º—è –º–∞—Å—Å–∏–≤–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞ 3 –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞–∑–∞–¥ (arrayName row col array_read_2d)
    if (programCounter < 3) {
        error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–º—è –º–∞—Å—Å–∏–≤–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞");
    }
    
    std::string arrayName = commands[programCounter - 3]; // –∏–º—è –º–∞—Å—Å–∏–≤–∞ –ø–µ—Ä–µ–¥ –∏–Ω–¥–µ–∫—Å–∞–º–∏
    
    if (!isVariable(arrayName)) {
        error("–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –º–∞—Å—Å–∏–≤–∞: " + arrayName);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –º–∞—Å—Å–∏–≤–∞
    if (arrays2D.find(arrayName) == arrays2D.end()) {
        error("–î–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: " + arrayName);
    }
    
    if (row < 0 || row >= static_cast<int>(arrays2D[arrayName].size()) ||
        col < 0 || col >= static_cast<int>(arrays2D[arrayName][row].size())) {
        error("–ò–Ω–¥–µ–∫—Å—ã –º–∞—Å—Å–∏–≤–∞ –≤–Ω–µ –≥—Ä–∞–Ω–∏—Ü: " + std::to_string(row) + ", " + std::to_string(col));
    }
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    std::cout << "\n  –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è " << arrayName << "[" << row << "][" << col << "]: ";
    double value;
    std::cin >> value;
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –º–∞—Å—Å–∏–≤
    arrays2D[arrayName][row][col] = Value(value);
    std::cout << "  –ü—Ä–æ—á–∏—Ç–∞–Ω–æ –≤ " << arrayName << "[" << row << "][" << col << "] = " << value;
} 