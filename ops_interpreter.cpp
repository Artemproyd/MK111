#include "ops_interpreter.h"
#include <iostream>
#include <sstream>
#include <stdexcept>
#include <cctype>

OPSInterpreter::OPSInterpreter() : programCounter(0), running(false) {}

void OPSInterpreter::execute(const std::vector<std::string>& opsCommands) {
    if (opsCommands.empty()) {
        std::cout << "‚ùå –ù–µ—Ç –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è!" << std::endl;
        return;
    }
    
    commands = opsCommands;
    programCounter = 0;
    running = true;
    
    // –°–Ω–∞—á–∞–ª–∞ –ø–∞—Ä—Å–∏–º –º–µ—Ç–∫–∏
    parseLabels();
    
    std::cout << "\nüîÑ –í–´–ü–û–õ–ù–ï–ù–ò–ï –û–ü–°:" << std::endl;
    std::cout << "–ö–æ–º–∞–Ω–¥—ã: ";
    for (size_t i = 0; i < commands.size(); ++i) {
        std::cout << commands[i];
        if (i < commands.size() - 1) std::cout << " ";
    }
    std::cout << "\n" << std::string(50, '-') << std::endl;
    
    // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    while (running && programCounter < commands.size()) {
        const std::string& command = commands[programCounter];
        
        std::cout << "PC=" << programCounter << ": " << command;
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–µ—Ç–∫–∏ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
        if (command.back() == ':') {
            std::cout << " (–º–µ—Ç–∫–∞)" << std::endl;
            programCounter++;
            continue;
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
        if (isNumber(command)) {
            // –ß–∏—Å–ª–æ - –ø–æ–º–µ—â–∞–µ–º –≤ —Å—Ç–µ–∫
            int value = std::stoi(command);
            pushStack(value);
            std::cout << " ‚Üí —Å—Ç–µ–∫: " << value;
        }
        else if (isVariable(command)) {
            // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è - –ø–æ–º–µ—â–∞–µ–º –µ—ë –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å—Ç–µ–∫
            int value = getVariable(command);
            pushStack(value);
            std::cout << " ‚Üí —Å—Ç–µ–∫: " << command << "=" << value;
        }
        else if (isOperator(command)) {
            // –ê—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –∏–ª–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
            if (command == "+" || command == "-" || command == "*" || command == "/") {
                executeArithmetic(command);
            }
            else if (command == ">" || command == "<" || command == "==") {
                executeComparison(command);
            }
            std::cout << " ‚Üí —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å—Ç–µ–∫–µ";
        }
        else if (command == ":=") {
            // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ
            executeAssignment();
            std::cout << " ‚Üí –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ";
        }
        else if (command == "jf") {
            // –£—Å–ª–æ–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ - –º–µ—Ç–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–æ–º–∞–Ω–¥–æ–π
            if (programCounter > 0) {
                std::string label = commands[programCounter - 1];
                executeConditionalJump(label);
                std::cout << " ‚Üí —É—Å–ª–æ–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ " << label;
                continue; // programCounter —É–∂–µ –∏–∑–º–µ–Ω–µ–Ω –≤ executeConditionalJump
            }
        }
        else if (command == "j") {
            // –ë–µ–∑—É—Å–ª–æ–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ - –º–µ—Ç–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–æ–º–∞–Ω–¥–æ–π
            if (programCounter > 0) {
                std::string label = commands[programCounter - 1];
                executeJump(label);
                std::cout << " ‚Üí –±–µ–∑—É—Å–ª–æ–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ " << label;
                continue; // programCounter —É–∂–µ –∏–∑–º–µ–Ω–µ–Ω –≤ executeJump
            }
        }
        else {
            // –í–æ–∑–º–æ–∂–Ω–æ –º–µ—Ç–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ - –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            std::cout << " (–ø—Ä–æ–ø—É—Å–∫)";
        }
        
        std::cout << std::endl;
        programCounter++;
    }
    
    std::cout << std::string(50, '-') << std::endl;
    std::cout << "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!" << std::endl;
    printState();
}

void OPSInterpreter::parseLabels() {
    labels.clear();
    for (size_t i = 0; i < commands.size(); ++i) {
        const std::string& command = commands[i];
        if (command.back() == ':') {
            // –≠—Ç–æ –º–µ—Ç–∫–∞
            std::string labelName = command.substr(0, command.length() - 1);
            labels[labelName] = i;
        }
    }
}

bool OPSInterpreter::isNumber(const std::string& str) const {
    if (str.empty()) return false;
    
    size_t start = 0;
    if (str[0] == '-' || str[0] == '+') {
        start = 1;
        if (str.length() == 1) return false;
    }
    
    for (size_t i = start; i < str.length(); ++i) {
        if (!std::isdigit(str[i])) {
            return false;
        }
    }
    return true;
}

bool OPSInterpreter::isVariable(const std::string& str) const {
    if (str.empty()) return false;
    if (!std::isalpha(str[0]) && str[0] != '_') return false;
    
    for (size_t i = 1; i < str.length(); ++i) {
        if (!std::isalnum(str[i]) && str[i] != '_') {
            return false;
        }
    }
    return true;
}

bool OPSInterpreter::isOperator(const std::string& str) const {
    return str == "+" || str == "-" || str == "*" || str == "/" ||
           str == ">" || str == "<" || str == "==";
}

bool OPSInterpreter::isCommand(const std::string& str) const {
    return str == ":=" || str == "jf" || str == "j" || str == "r" || str == "w" ||
           str == "m1" || str == "m2" || str == "i";
}

void OPSInterpreter::executeArithmetic(const std::string& op) {
    if (operandStack.size() < 2) {
        error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø–µ—Ä–∞–Ω–¥–æ–≤ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ " + op);
    }
    
    int b = popStack(); // –í—Ç–æ—Ä–æ–π –æ–ø–µ—Ä–∞–Ω–¥
    int a = popStack(); // –ü–µ—Ä–≤—ã–π –æ–ø–µ—Ä–∞–Ω–¥
    int result = 0;
    
    if (op == "+") {
        result = a + b;
    } else if (op == "-") {
        result = a - b;
    } else if (op == "*") {
        result = a * b;
    } else if (op == "/") {
        if (b == 0) {
            error("–î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å");
        }
        result = a / b;
    }
    
    pushStack(result);
}

void OPSInterpreter::executeComparison(const std::string& op) {
    if (operandStack.size() < 2) {
        error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø–µ—Ä–∞–Ω–¥–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è " + op);
    }
    
    int b = popStack(); // –í—Ç–æ—Ä–æ–π –æ–ø–µ—Ä–∞–Ω–¥
    int a = popStack(); // –ü–µ—Ä–≤—ã–π –æ–ø–µ—Ä–∞–Ω–¥
    int result = 0;
    
    if (op == ">") {
        result = (a > b) ? 1 : 0;
    } else if (op == "<") {
        result = (a < b) ? 1 : 0;
    } else if (op == "==") {
        result = (a == b) ? 1 : 0;
    }
    
    pushStack(result);
}

void OPSInterpreter::executeAssignment() {
    if (operandStack.size() < 2) {
        error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø–µ—Ä–∞–Ω–¥–æ–≤ –¥–ª—è –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è");
    }
    
    int value = popStack();       // –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è
    
    // –í —Å—Ç–µ–∫–µ –¥–æ–ª–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏–ª–∏ –µ—ë –∞–¥—Ä–µ—Å
    // –ù–æ –≤ –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —É–∂–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–∞–∫ —á–∏—Å–ª–æ –≤ —Å—Ç–µ–∫–µ
    // –ù—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–µ–¥ –æ–ø–µ—Ä–∞—Ü–∏–µ–π –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è
    
    std::string varName = "";
    
    // –ò—â–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –ø–µ—Ä–µ–¥ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–µ–π (–ø–µ—Ä–µ–¥ ":=")
    for (int i = static_cast<int>(programCounter) - 1; i >= 0; --i) {
        if (isVariable(commands[i]) && commands[i] != "jf" && commands[i] != "j") {
            varName = commands[i];
            break;
        }
    }
    
    if (!varName.empty()) {
        variables[varName] = value;
        // –£–¥–∞–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏–∑ —Å—Ç–µ–∫–∞, –µ—Å–ª–∏ –æ–Ω–æ —Ç–∞–º –µ—Å—Ç—å
        if (!operandStack.empty()) {
            popStack(); // —É–±–∏—Ä–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        }
    } else {
        error("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è");
    }
}

void OPSInterpreter::executeJump(const std::string& label) {
    auto it = labels.find(label);
    if (it != labels.end()) {
        programCounter = it->second;
    } else {
        error("–ú–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: " + label);
    }
}

void OPSInterpreter::executeConditionalJump(const std::string& label) {
    if (operandStack.empty()) {
        error("–ù–µ—Ç —É—Å–ª–æ–≤–∏—è –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞");
    }
    
    int condition = popStack();
    
    // jf - jump if false (–ø–µ—Ä–µ—Ö–æ–¥ –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –ª–æ–∂–Ω–æ)
    if (condition == 0) {
        executeJump(label);
    } else {
        programCounter++; // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    }
}

int OPSInterpreter::popStack() {
    if (operandStack.empty()) {
        error("–ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑ –ø—É—Å—Ç–æ–≥–æ —Å—Ç–µ–∫–∞");
    }
    
    int value = operandStack.top();
    operandStack.pop();
    return value;
}

void OPSInterpreter::pushStack(int value) {
    operandStack.push(value);
}

void OPSInterpreter::setVariable(const std::string& name, int value) {
    variables[name] = value;
}

int OPSInterpreter::getVariable(const std::string& name) const {
    auto it = variables.find(name);
    if (it != variables.end()) {
        return it->second;
    }
    return 0; // –ù–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–º–µ—é—Ç –∑–Ω–∞—á–µ–Ω–∏–µ 0
}

void OPSInterpreter::printState() const {
    std::cout << "\nüìä –°–û–°–¢–û–Ø–ù–ò–ï –ò–ù–¢–ï–†–ü–†–ï–¢–ê–¢–û–†–ê:" << std::endl;
    
    std::cout << "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:" << std::endl;
    if (variables.empty()) {
        std::cout << "  (–Ω–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö)" << std::endl;
    } else {
        for (const auto& var : variables) {
            std::cout << "  " << var.first << " = " << var.second << std::endl;
        }
    }
    
    std::cout << "–°—Ç–µ–∫ –æ–ø–µ—Ä–∞–Ω–¥–æ–≤:" << std::endl;
    if (operandStack.empty()) {
        std::cout << "  (–ø—É—Å—Ç–æ–π)" << std::endl;
    } else {
        std::stack<int> tempStack = operandStack;
        std::vector<int> stackContents;
        while (!tempStack.empty()) {
            stackContents.push_back(tempStack.top());
            tempStack.pop();
        }
        std::cout << "  ";
        for (int i = static_cast<int>(stackContents.size()) - 1; i >= 0; --i) {
            std::cout << stackContents[i] << " ";
        }
        std::cout << "(–≤–µ—Ä—à–∏–Ω–∞ —Å–ø—Ä–∞–≤–∞)" << std::endl;
    }
    
    if (!labels.empty()) {
        std::cout << "–ú–µ—Ç–∫–∏:" << std::endl;
        for (const auto& label : labels) {
            std::cout << "  " << label.first << " -> –ø–æ–∑–∏—Ü–∏—è " << label.second << std::endl;
        }
    }
}

void OPSInterpreter::reset() {
    while (!operandStack.empty()) {
        operandStack.pop();
    }
    variables.clear();
    labels.clear();
    commands.clear();
    programCounter = 0;
    running = false;
}

void OPSInterpreter::error(const std::string& message) const {
    throw std::runtime_error("–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∞: " + message + 
                              " (–ø–æ–∑–∏—Ü–∏—è " + std::to_string(programCounter) + ")");
} 